Given an array arr[] containing integers and an integer k, your task is to find the length of the longest subarray where the sum of its elements is equal to the given value k. It is guaranteed that a valid subarray exists.

Examples:

Input: arr[] = [10, 5, 2, 7, 1, 9], k = 15
Output: 4
Explanation: The subarray [5, 2, 7, 1] has a sum of 15 and length 4.
Input: arr[] = [-1, 2, -3], k = -2
Output: 3
Explanation: The subarray [-1, 2, -3] has a sum of -2 and length 3.












int lenOfLongestSubarr(vector<int>& arr, int k) {
        int n = arr.size();
        int maxsum = 0;
        for(int i =0; i<n-1; i++){
            int sum = 0;
            for(int j = i; j<n; j++){
                sum += arr[j];
                
                if(sum == k){
                    maxsum = max(maxsum, j-i+1);
                }
            }
            
        }
        return maxsum;











optimal approach

int lenOfLongestSubarr(vector<int>& arr, int k) {
        // code here
        
        unordered_map<int, int> map;
        int n = arr.size();
        int maxlen = 0;
        int sum = 0;
        for(int i =0; i<n; i++){
            sum += arr[i];
            
            if(sum == k){
                maxlen = i+1;
            }
            
            
            if(map.find(sum - k) != map.end()){
                maxlen = max(maxlen, i - map[sum - k]);
            }
            
            if(map.find(sum) == map.end()){
                map[sum] = i;
            }
        }
        return maxlen;
