class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;

        for(int i =0; i<n; i++){
            int sum = 0;
            for(int j = i; j<n; j++){
                sum+= nums[j];


                if(sum == k){
                    count++;
                }


            }
        }
        return count;
        
    }
};














n complexity


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> map;
        int prefixsum = 0;
        int count  =0;
        map[prefixsum] = 1;
        for(int arr : nums){

            prefixsum+= arr;

           if(map.find(prefixsum - k) != map.end()){
            count+= map[prefixsum - k];
           }
           map[prefixsum]++;

        }
        return count;
    }
};
