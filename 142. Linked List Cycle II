/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {


        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* entry = head;

        if(head == NULL)
        return NULL;


        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
            if(slow == fast){
                while(entry != slow){
                    slow = slow->next;
                    entry = entry->next;
                }
                return slow;
            }
        }
        return NULL;




        // //2nd approach
        // unordered_set<ListNode*> set;
        // ListNode* curr = head;
        // while(curr != NULL){
        //     if(set.find(curr) != set.end()){
        //         return curr;
        //     }
        //     else{
        //         set.insert(curr);
        //         curr = curr->next;
        //     }
        // }
        // return NULL;
        
    }
};
